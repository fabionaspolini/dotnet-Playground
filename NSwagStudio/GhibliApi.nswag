{
  "runtime": "Net50",
  "defaultVariables": null,
  "documentGenerator": {
    "fromDocument": {
      "json": "swagger: '2.0'\ninfo:\n  title: Studio Ghibli API\n  description: |\n    # Studio Ghibli API\n      The Studio Ghibli API catalogs the people, places, and things found in the worlds of Ghibli. It was created to help users discover resources, consume them via HTTP requests, and interact with them in whatever way makes sense. Navigation can be found on the left sidebar, and the right sidebar shows examples of returned objects for successful calls.\n\n      Users can raise an issue, ask for help, or find a contribution guide at the main repo: [https://github.com/janaipakos/ghibliapi](https://github.com/janaipakos/ghibliapi)\n\n    # Getting Started\n      Requests can be made with `curl` or other helper libraries by following regular REST calls. For example, here is how to GET the resource for the film *My Neighbor Tororo*:\n\n      `curl https://ghibliapi.herokuapp.com/films/58611129-2dbc-4a81-a72f-77ddfc1b1b49`\n\n      Calling this resource will respond with the following object:\n\n      ```json\n      {\n      \"id\": \"58611129-2dbc-4a81-a72f-77ddfc1b1b49\",\n      \"title\": \"My Neighbor Totoro\",\n      \"original_title\": \"となりのトトロ\",\n      \"original_title_romanised\": \"Tonari no Totoro\",\n      \"description\": \"Two sisters move to the country with their father in order to be closer to their hospitalized mother, and discover the surrounding trees are inhabited by Totoros, magical spirits of the forest. When the youngest runs away from home, the older sister seeks help from the spirits to find her.\",\n      \"director\": \"Hayao Miyazaki\",\n      \"producer\": \"Hayao Miyazaki\",\n      \"release_date\": \"1988\",\n      \"running_time\": \"86\",\n      \"rt_score\": \"93\",\n      ...\n      }\n      ```\n\n    # Base URL\n      Users must prepend all resource calls with this base URL:\n\n      `https://ghibliapi.herokuapp.com`\n\n    # Authentication\n       There is no authentication necessary for the Studio Ghibli API.\n\n    # Workflow\n      Endpoints can be used by themselves, or combined with one another to retrieve more specific information. An example workflow is listed below:\n\n      ### Goal: Get a list of people with the species classification as \"spirit.\"\n        - Call the species endpoint with `/species?name=spirit`\n        - Call the people listed under this endpoint with `/people/<uuid>`\n        - Combine these results\n\n\n    # Use Case\n      There are numerous ways for users to interact with the platform. For example, with the \"people\" API, users can get customized information about people, such as eye and hair color. Another example is using the \"species\"\" API to find the different films each creature appears in. A more concrete case study is listed below:\n\n      ### A use case for finding information on all the cats of Studio Ghibli.\n\n      Using the Aeson library in Haskell, the user can parse the `people` array to return all of the cats, listed under `/species/603428ba-8a86-4b0b-a9f1-65df6abef3d3`\n\n      ```haskell\n      import qualified Data.ByteString.Lazy as L\n      import GHC.Generics\n      import Data.Aeson\n\n      main = do\n          fileData <- L.readFile \"cats.json\"\n          let ghibliResponse = decode fileData :: Maybe GhibliCatResponse\n          let ghibliResults = people <$> ghibliResponse\n          findCat ghibliResults\n\n      findCat :: Maybe [GhibliCatResult] -> IO ()\n      findCat Nothing = print \"data not found\"\n      findCat (Just people) = do\n          print $ T.pack \"Studio Ghibli Cats:\"\n          forM_ people $ \\person -> do\n              let dataName = name person\n              let dataGender = gender person\n              let dataAge = age person\n              let dataHairColor = hairColor person\n              let dataEyeColor = eyeColor person\n              let dataFilms = films person\n              print $ T.concat [T.pack 'name: ', dataName\n                               ,T.pack ', gender: ', dataGender\n                               ,T.pack ', age: ', dataAge\n                               ,T.pack ', hair color: ', dataHairColor\n                               ,T.pack ', eye color: '', dataEyeColor\n                               ]\n      ```\n\n      The above code will return an IO Action of the requested cats.\n\n      ```\n      \"Studio Ghibli Cats:\"\n      \"name: Jiji, gender: Male, hair color: Black, eye color: Black\"\n      \"name: Catbus, gender: Male, hair color: Brown, eye color: Yellow\"\n      \"name: Niya, gender: Male, hair color: Beige, eye color: White\"\n      \"name: Renaldo Moon aka Moon aka Muta, gender: Male, hair color: Beige, eye color: White\"\n      \"name: Cat King, gender: Male, hair color: Grey, eye color: Emerald\"\n      \"name: Yuki, gender: Female, hair color: White, eye color: Blue\"\n      \"name: Haru, gender: Female, hair color: Brown, eye color: Brown\"\n      \"name: Baron Humbert von Gikkingen, gender: Male, hair color: Yellow, eye color: Green\"\n      \"name: Natori, gender: Male, hair color: Grey, eye color: Blue\"\n      ```\n\n    # Helper Libraries\n\n      ## Elixir\n      - [ghibli](https://github.com/sotojuan/ghibli) by [Juan Soto](https://github.com/sotojuan)\n\n  version: \"1.0.1\"\n  x-logo:\n    url: \"./images/logo.svg\"\n    backgroundColor: \"#FFFFFF\"\n# the domain of the service\nhost: ghibliapi.herokuapp.com\n# array of all schemes that your API supports\nschemes:\n  - https\nx-tagGroups:\n  - name: Endpoints\n    tags:\n      - Films\n      - People\n      - Locations\n      - Species\n      - Vehicles\nproduces:\n  - application/json\npaths:\n  /films:\n    get:\n      summary: Return all films\n      description: |\n        The Films endpoint returns information about all of the Studio Ghibli films.\n      tags:\n        - Films\n      parameters:\n        - fields:\n          name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n        - limit:\n          name: limit\n          in: query\n          required: false\n          description: amount of results (default 50) (maximum 250)\n          type: integer\n          format: int64\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/films\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/films')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/films').read()\n\n      responses:\n        200:\n          description: An array of films\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Films'\n          examples:\n            application/json:\n              [{\n              \"id\": \"2baf70d1-42bb-4437-b551-e5fed5a87abe\",\n              \"title\": \"Castle in the Sky\",\n              \"original_title\": \"天空の城ラピュタ\",\n              \"original_title_romanised\": \"Tenkū no shiro Rapyuta\",\n              \"description\": \"The orphan Sheeta inherited a mysterious crystal that links her to the mythical sky-kingdom of Laputa. With the help of resourceful Pazu and a rollicking band of sky pirates, she makes her way to the ruins of the once-great civilization. Sheeta and Pazu must outwit the evil Muska, who plans to use Laputa's science to make himself ruler of the world.\",\n              \"director\": \"Hayao Miyazaki\",\n              \"producer\": \"Isao Takahata\",\n              \"release_date\": \"1986\",\n              \"running_time\": \"124\",\n              \"rt_score\": \"95\",\n              \"people\": [\n                \"https://ghibliapi.herokuapp.com/people/\"\n              ],\n              \"species\": [\n                \"https://ghibliapi.herokuapp.com/species/af3910a6-429f-4c74-9ad5-dfe1c4aa04f2\"\n              ],\n              \"locations\": [\n                \"https://ghibliapi.herokuapp.com/locations/\"\n              ],\n              \"vehicles\": [\n                \"https://ghibliapi.herokuapp.com/vehicles/\"\n              ],\n              \"url\": \"https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe\"\n              },\n              {\n              \"id\": \"12cfb892-aac0-4c5b-94af-521852e46d6a\",\n              \"title\": \"Grave of the Fireflies\",\n              \"original_title\": \"火垂るの墓\",\n              \"original_title_romanised\": \"Hotaru no haka\",\n              \"description\": \"In the latter part of World War II, a boy and his sister, orphaned when their mother is killed in the firebombing of Tokyo, are left to survive on their own in what remains of civilian life in Japan. The plot follows this boy and his sister as they do their best to survive in the Japanese countryside, battling hunger, prejudice, and pride in their own quiet, personal battle.\",\n              \"director\": \"Isao Takahata\",\n              \"producer\": \"Toru Hara\",\n              \"release_date\": \"1988\",\n              \"running_time\": \"89\",\n              \"rt_score\": \"97\",\n              \"people\": [\n                \"https://ghibliapi.herokuapp.com/people/\"\n              ],\n              \"species\": [\n                \"https://ghibliapi.herokuapp.com/species/af3910a6-429f-4c74-9ad5-dfe1c4aa04f2\"\n              ],\n              \"locations\": [\n                \"https://ghibliapi.herokuapp.com/locations/\"\n              ],\n              \"vehicles\": [\n                \"https://ghibliapi.herokuapp.com/vehicles/\"\n              ],\n              \"url\": \"https://ghibliapi.herokuapp.com/films/12cfb892-aac0-4c5b-94af-521852e46d6a\"\n              }]\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /films/{id}:\n    get:\n      summary: Film ID\n      description: |\n        Returns a film based on a single ID\n      parameters:\n        - name: id\n          in: path\n          description: film `id`\n          required: true\n          type: string\n        - name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n      tags:\n        - Films\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/films/<id>\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/films/<id>')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/films/<id>').read()\n      responses:\n        200:\n          description: A single film is returned\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Films'\n          examples:\n            application/json:\n              id: 2baf70d1-42bb-4437-b551-e5fed5a87abe\n              title: Castle in the Sky\n              original_title: \"天空の城ラピュタ\"\n              original_title_romanised: \"Tenkū no shiro Rapyuta\"\n              description: The orphan Sheeta inherited a mysterious crystal that links her to the mythical sky-kingdom of Laputa. With the help of resourceful Pazu and a rollicking band of sky pirates, she makes her way to the ruins of the once-great civilization. Sheeta and Pazu must outwit the evil Muska, who plans to use Laputa's science to make himself ruler of the world.\n              director: Hayao Miyazaki\n              producer: Isao Takahata\n              release_date: \"1986\"\n              running_time: \"124\"\n              rt_score: \"95\"\n              people: [\n                \"https://ghibliapi.herokuapp.com/people/\"\n              ]\n              species: [\n                \"https://ghibliapi.herokuapp.com/species/af3910a6-429f-4c74-9ad5-dfe1c4aa04f2\"\n              ]\n              locations: [\n                \"https://ghibliapi.herokuapp.com/locations/\"\n              ]\n              vehicles: [\n                \"https://ghibliapi.herokuapp.com/vehicles/\"\n              ]\n              url: \"https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe\"\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /people:\n    get:\n      summary: Return all people\n      description: |\n         The People endpoint returns information about all of the Studio Ghibli people. This broadly includes all Ghibli characters, human and non-.\n      tags:\n        - People\n      parameters:\n        - fields:\n          name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n        - limit:\n          name: limit\n          in: query\n          required: false\n          description: amount of results (default 50) (maximum 250)\n          type: integer\n          format: int64\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/people\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/people')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/people').read()\n      responses:\n        200:\n          description: An array of people\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/People'\n          examples:\n            application/json:\n              [{\n              \"id\": \"ba924631-068e-4436-b6de-f3283fa848f0\",\n              \"name\": \"Ashitaka\",\n              \"gender\": \"male\",\n              \"age\": \"late teens\",\n              \"eye_color\": \"brown\",\n              \"hair_color\": \"brown\",\n              \"films\": [\n                \"https://ghibliapi.herokuapp.com/films/030555b3-4c92-4fce-93fb-e70c3ae3df8b\"\n              ],\n              \"species\":    \"https://ghibliapi.herokuapp.com/species/af3910a6-429f-4c74-9ad5-dfe1c4aa04f2\",\n              \"url\": \"https://ghibliapi.herokuapp.com/people/ba924631-068e-4436-b6de-f3283fa848f0\"\n            },\n            {\n              \"id\": \"030555b3-4c92-4fce-93fb-e70c3ae3df8b\",\n              \"name\": \"Yakul\",\n              \"age\": \"Unknown\",\n              \"gender\": \"male\",\n              \"eye_color\": \"Grey\",\n              \"hair_color\": \"Brown\",\n              \"films\": [\n                \"https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\"\n              ],\n              \"species\": \"https://ghibliapi.herokuapp.com/species/6bc92fdd-b0f4-4286-ad71-1f99fb4a0d1e\",\n              \"url\": \"https://ghibliapi.herokuapp.com/people/030555b3-4c92-4fce-93fb-e70c3ae3df8b\"\n            }]\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /people/{id}:\n    get:\n      summary: People ID\n      description: |\n        Returns a person based on a single ID\n      parameters:\n        - name: id\n          in: path\n          description: person `id`\n          required: true\n          type: string\n        - name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n      tags:\n        - People\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/people/<id>\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/people/<id>')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/people/<id>').read()\n      responses:\n        200:\n          description: A single person is returned\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/People'\n          examples:\n            application/json:\n              id: ba924631-068e-4436-b6de-f3283fa848f0\n              name: Cat King\n              gender: Male\n              eye_color: Emerald\n              hair_color: Grey\n              films: [\n                https://ghibliapi.herokuapp.com/films/90b72513-afd4-4570-84de-a56c312fdf81\n              ]\n              species: https://ghibliapi.herokuapp.com/species/603428ba-8a86-4b0b-a9f1-65df6abef3d3\n              url: https://ghibliapi.herokuapp.com/people/3042818d-a8bb-4cba-8180-c19249822d57\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /locations:\n    get:\n      summary: Return all locations\n      description: |\n         The Locations endpoint returns information about all of the Studio Ghibli locations. This broadly includes lands, countries, and places.\n      tags:\n        - Locations\n      parameters:\n        - fields:\n          name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n        - limit:\n          name: limit\n          in: query\n          required: false\n          description: amount of results (default 50) (maximum 250)\n          type: integer\n          format: int64\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/locations\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/locations')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/locations').read()\n      responses:\n        200:\n          description: An array of locations\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Locations'\n          examples:\n            application/json:\n              [{\n                \"id\": \"11014596-71b0-4b3e-b8c0-1c4b15f28b9a\",\n                \"name\": \"Irontown\",\n                \"climate\": \"Continental\",\n                \"terrain\": \"Mountain\",\n                \"surface_water\": \"40\",\n                \"residents\": [\n                  \"https://ghibliapi.herokuapp.com/people/ba924631-068e-4436-b6de-f3283fa848f0\",\n                  \"https://ghibliapi.herokuapp.com/people/030555b3-4c92-4fce-93fb-e70c3ae3df8b\"\n                ],\n                \"films\": [\n                  \"https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\"\n                ],\n                \"url\": \"https://ghibliapi.herokuapp.com/locations/11014596-71b0-4b3e-b8c0-1c4b15f28b9a\"\n              },\n              {\n                \"id\": \"11014596-71b0-4b3e-b8c0-1c4b15f28b9a\",\n                \"name\": \"Gutiokipanja\",\n                \"climate\": \"Continental\",\n                \"terrain\": \"Hill\",\n                \"surface_water\": \"50\",\n                \"residents\": [\n                  \"https://ghibliapi.herokuapp.com/people/ba924631-068e-4436-b6de-f3283fa848f0\",\n                  \"https://ghibliapi.herokuapp.com/people/030555b3-4c92-4fce-93fb-e70c3ae3df8b\"\n                ],\n                \"films\": [\n                  \"https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\"\n                ],\n                \"url\": \"https://ghibliapi.herokuapp.com/locations/11014596-71b0-4b3e-b8c0-1c4b15f28b9a\"\n              }]\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /locations/{id}:\n    get:\n      summary: Location ID\n      description: Returns an individual location.\n      parameters:\n        - name: id\n          in: path\n          description: location `id`\n          required: true\n          type: string\n        - name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n      tags:\n        - Locations\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/locations/<id>\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/locations/<id>')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/locations/<id>').read()\n      responses:\n        200:\n          description: A single location is returned\n          schema:\n            type: object\n            items:\n              $ref: '#/definitions/Locations'\n          examples:\n            application/json:\n              id: 11014596-71b0-4b3e-b8c0-1c4b15f28b9a\n              name: Irontown\n              climate: Continental\n              terrain: Mountain\n              surface_water: \"40\"\n              residents: [\n                https://ghibliapi.herokuapp.com/people/ba924631-068e-4436-b6de-f3283fa848f0\n              ]\n              films: [ \n                https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\n              ]\n              url: https://ghibliapi.herokuapp.com/locations/11014596-71b0-4b3e-b8c0-1c4b15f28b9a\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /species:\n    get:\n      summary: Species\n      description: |\n        The Species endpoint returns information about all of the Studio Ghibli species. This includes humans, animals, and spirits et al.\n      tags:\n        - Species\n      parameters:\n        - fields:\n          name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n        - limit:\n          name: limit\n          in: query\n          required: false\n          description: amount of results (default 50) (maximum 250)\n          type: integer\n          format: int64\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/species\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/species')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/species').read()\n      responses:\n        200:\n          description: An array of species\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Species'\n          examples:\n              application/json:\n                [\n                {\n                  \"id\": \"b5a92d0e-5fb4-43d4-ba60-c012135958e4\",\n                  \"name\": \"Spirit\",\n                  \"classification\": \"Spirit\",\n                  \"eye_colors\": \"Red\",\n                  \"hair_colors\": \"Light Orange\",\n                  \"url\": \"https://ghibliapi.herokuapp.com/species/b5a92d0e-5fb4-43d4-ba60-c012135958e4\",\n                  \"people\": [\n                    \"https://ghibliapi.herokuapp.com/people/ca568e87-4ce2-4afa-a6c5-51f4ae80a60b\"\n                  ],\n                  \"films\": [\n                    \"https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\"\n                  ]\n                },\n                {\n                  \"id\": \"f25fa661-3073-414d-968a-ab062e3065f7\",\n                  \"name\": \"God\",\n                  \"classification\": \"God\",\n                  \"eye_colors\": \"Brown\",\n                  \"hair_colors\": \"White\",\n                  \"url\": \"https://ghibliapi.herokuapp.com/species/f25fa661-3073-414d-968a-ab062e3065f7\",\n                  \"people\": [\n                    \"Moro\"\n                  ],\n                  \"films\": [\n                    \"https://ghibliapi.herokuapp.com/films/0440483e-ca0e-4120-8c50-4c8cd9b965d6\"\n                  ]\n                }\n                ]\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n  /species/{id}:\n    get:\n      summary: Species ID\n      description: Returns an individual species\n      parameters:\n        - name: id\n          in: path\n          description: film `id`\n          required: true\n          type: string\n        - name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n      tags:\n        - Species\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/species/<id>\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/species/<id>')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/species/<id>').read()\n      responses:\n        200:\n          description: A single species is returned\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Species'\n          examples:\n            application/json:\n              id: 603428ba-8a86-4b0b-a9f1-65df6abef3d3\n              name: Cat\n              classification: Mammal\n              eye_colors: \"Brown, Black, Yellow, White, Emerald, Blue, Green\"\n              hair_colors: \"White, Black, Brown, Beige, Grey, Yellow\"\n              people: [\n                \"https://ghibliapi.herokuapp.com/people/7151abc6-1a9e-4e6a-9711-ddb50ea572ec\",\n                \"https://ghibliapi.herokuapp.com/people/f467e18e-3694-409f-bdb3-be891ade1106\",\n                \"https://ghibliapi.herokuapp.com/people/89026b3a-abc4-4053-ab1a-c6d2eea68faa\",\n                \"https://ghibliapi.herokuapp.com/people/6b3facea-ea33-47b1-96ce-3fc737b119b8\",\n                \"https://ghibliapi.herokuapp.com/people/3042818d-a8bb-4cba-8180-c19249822d57\",\n                \"https://ghibliapi.herokuapp.com/people/58d1973f-f247-47d7-9358-e56cb0d2b5a6\",\n                \"https://ghibliapi.herokuapp.com/people/a3d8e70f-46a0-4e5a-b850-db01620d6b92\",\n                \"https://ghibliapi.herokuapp.com/people/fc196c4f-0201-4ed2-9add-c6403f7c4d32\",\n                \"https://ghibliapi.herokuapp.com/people/466bc926-2024-4653-ac63-fe52f2dc8c7b\"\n                ]\n              films: [\n                \"https://ghibliapi.herokuapp.com/films/58611129-2dbc-4a81-a72f-77ddfc1b1b49\",\n                \"https://ghibliapi.herokuapp.com/films/ea660b10-85c4-4ae3-8a5f-41cea3648e3e\",\n                \"https://ghibliapi.herokuapp.com/films/ff24da26-a969-4f0e-ba1e-a122ead6c6e3\",\n                \"https://ghibliapi.herokuapp.com/films/90b72513-afd4-4570-84de-a56c312fdf81\",\n                \"https://ghibliapi.herokuapp.com/films/2de9426b-914a-4a06-a3a0-5e6d9d3886f6\"\n                ]\n              url: https://ghibliapi.herokuapp.com/species/603428ba-8a86-4b0b-a9f1-65df6abef3d3\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n\n  /vehicles:\n    get:\n      summary: Vehicles\n      description: |\n        The Vehicles endpoint returns information about all of the Studio Ghibli vechiles. This includes cars, ships, and planes.\n      tags:\n        - Vehicles\n      parameters:\n        - fields:\n          name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n        - limit:\n          name: limit\n          in: query\n          required: false\n          description: amount of results (default 50) (maximum 250)\n          type: integer\n          format: int64\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/vehicles\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/vehicles')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/vehicles').read()\n      responses:\n        200:\n          description: An array of vehicles\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Vehicles'\n          examples:\n              application/json:\n                [{\n                  \"id\": \"4e09b023-f650-4747-9ab9-eacf14540cfb\",\n                  \"name\": \"Air Destroyer Goliath\",\n                  \"description\": \"A military airship utilized by the government to access Laputa\",\n                  \"vehicle_class\": \"Airship\",\n                  \"length\": \"1,000\",\n                  \"pilot\": \"https://ghibliapi.herokuapp.com/people/40c005ce-3725-4f15-8409-3e1b1b14b583\",\n                  \"films\": [\n                    \"https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe\"\n                  ],\n                  \"url\": \"https://ghibliapi.herokuapp.com/films/2baf70d1-42bb-4437-b551-e5fed5a87abe\"\n                },\n                {\n                  \"id\": \"d8f893b5-1dd9-41a1-9918-0099c1aa2de8\",\n                  \"name\": \"Red Wing\",\n                  \"description\": \"An experimental aircraft captured by Porco. Named Savoia S.21\",\n                  \"vehicle_class\": \"Airplane\",\n                  \"length\": \"20\",\n                  \"pilot\": \"https://ghibliapi.herokuapp.com/people/6523068d-f5a9-4150-bf5b-76abe6fb42c3\",\n                  \"films\": [\n                    \"https://ghibliapi.herokuapp.com/films/ebbb6b7c-945c-41ee-a792-de0e43191bd8\"\n                  ],\n                  \"url\": \"https://ghibliapi.herokuapp.com/vehicles/d8f893b5-1dd9-41a1-9918-0099c1aa2de8\"\n                }\n                ]\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\n\n  /vehicles/{id}:\n    get:\n      summary: Vehicle ID\n      description: An individual vehicle\n      parameters:\n        - name: id\n          in: path\n          description: film `id`\n          required: true\n          type: string\n        - name: fields\n          in: query\n          description: comma-separated list of fields to include in the response\n          required: false\n          type: string\n      tags:\n        - Vehicles\n      x-code-samples:\n        - lang: curl\n          source: |\n            curl -X GET -H \"Content-Type: application/json\" https://ghibliapi.herokuapp.com/vehicles/<id>\n        - lang: Ruby\n          source: |\n            require 'net/http'\n\n            uri = URI('https://ghibliapi.herokuapp.com/vehicles/<id>')\n            Net::HTTP.get(uri) # => String\n        - lang: Python\n          source: |\n            import urllib2\n\n            urllib2.urlopen('https://ghibliapi.herokuapp.com/vehicles/<id>').read()\n      responses:\n        200:\n          description: A single vehicle is returned\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Vehicles'\n          examples:\n              application/json:\n                {\n                  \"id\": \"923d70c9-8f15-4972-ad53-0128b261d628\",\n                  \"name\": \"Sosuke's Boat\",\n                  \"description\": \"A toy boat where Sosuke plays\",\n                  \"vehicle_class\": \"Boat\",\n                  \"length\": \"10\",\n                  \"pilot\": \"https://ghibliapi.herokuapp.com/people/a10f64f3-e0b6-4a94-bf30-87ad8bc51607\",\n                  \"films\": [\n                    \"https://ghibliapi.herokuapp.com/films/758bf02e-3122-46e0-884e-67cf83df1786\"\n                  ],\n                  \"url\": \"https://ghibliapi.herokuapp.com/films/758bf02e-3122-46e0-884e-67cf83df1786\"\n                }\n        '400':\n          description: Bad request\n        '404':\n          description: Not found\ndefinitions:\n  Films:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Unique identifier representing a specific film\n      title:\n        type: string\n        description: Title of the film\n      original_title:\n        type: string\n        description: Original title of the film\n      original_title_romanised:\n        type: string\n        description: Orignal title in romanised form\n      description:\n        type: string\n        description: Description of the film\n      director:\n        type: string\n        description: Director of the film\n      producer:\n        type: string\n        description: Producer of the film\n      release_date:\n        type: string\n        description: Release year of film\n      running_time:\n        type: string\n        description: Running time of the film in minutes\n      rt_score:\n        type: string\n        description: Rotten Tomato score of film\n      people:\n        type: array\n        description: People found in film\n        items:\n          type: string\n      species:\n        type: array\n        description: Species found in film\n        items:\n          type: string\n      locations:\n        type: array\n        description: Locations found in film\n        items:\n          type: string\n      vehicles:\n        type: array\n        description: Vehicles found in film\n        items:\n          type: string\n      url:\n        type: string\n        description: URL of film\n  People:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Unique identifier representing a specific person\n      name:\n        type: string\n        description: Name of the person\n      gender:\n        type: string\n        description: Gender of the person\n      age:\n        type: string\n        description: Age, if known, of the person\n      eye_color:\n        type: string\n        description: Eye color of the person\n      hair_color:\n        type: string\n        description: Hair color of the person\n      films:\n        type: array\n        description: Array of films the person appears in\n        items:\n          type: string\n      species:\n        type: string\n        description: Species the person belongs to\n      url:\n        type: string\n        description: Unique url of the person\n  Locations:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Unique identifier representing a specific location\n      name:\n        type: string\n        description: Name of location\n      climate:\n        type: string\n        description: Climate of location\n      terrain:\n        type: string\n        description: Terrain type of location\n      surface_water:\n        type: string\n        description: Percent of location covered in water\n      residents:\n        type: array\n        description: Array of residents in location\n        items:\n          type: string\n      films:\n        type: array\n        description: Array of films the location appears in\n        items:\n          type: string\n      url:\n        type: string\n        description: Individual URL of the location\n  Species:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Unique identifier representing a specific species\n      name:\n        type: string\n        description: Name of the species\n      classification:\n        type: string\n        description: Classification of the species\n      eye_color:\n        type: string\n        description: Eye color of the species\n      hair_color:\n        type: string\n        description: Hair color of the species\n      people:\n        type: array\n        description: People belonging to the species\n        items:\n          type: string\n      films:\n        type: array\n        description: Array of films the species appears in\n        items:\n          type: string\n      url:\n        type: string\n        description: Unique url of the species\n  Vehicles:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Unique identifier representing a specific vehicle\n      name:\n        type: string\n        description: Name of the vehicles\n      description:\n        type: string\n        description: Description of the vehicle\n      vehicle_class:\n        type: string\n        description: Class of the vehicle\n      length:\n        type: string\n        description: Length of the vehicle in feet\n      pilot:\n        type: string\n        description: Pilot of the vehicle\n      films:\n        type: array\n        description: Array of films the vehicle appears in\n        items:\n          type: string\n      url:\n        type: string\n        description: Unique URL of the vehicle\n  Error:\n    type: object\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n      fields:\n        type: string\n",
      "url": "GhibliApiSwagger.yaml",
      "output": null,
      "newLineBehavior": "Auto"
    }
  },
  "codeGenerators": {
    "openApiToCSharpClient": {
      "clientBaseClass": "",
      "configurationClass": "",
      "generateClientClasses": true,
      "generateClientInterfaces": false,
      "clientBaseInterface": null,
      "injectHttpClient": true,
      "disposeHttpClient": true,
      "protectedMethods": [],
      "generateExceptionClasses": true,
      "exceptionClass": "ApiException",
      "wrapDtoExceptions": true,
      "useHttpClientCreationMethod": false,
      "httpClientType": "System.Net.Http.HttpClient",
      "useHttpRequestMessageCreationMethod": false,
      "useBaseUrl": true,
      "generateBaseUrlProperty": true,
      "generateSyncMethods": false,
      "generatePrepareRequestAndProcessResponseAsAsyncMethods": false,
      "exposeJsonSerializerSettings": false,
      "clientClassAccessModifier": "public",
      "typeAccessModifier": "public",
      "generateContractsOutput": false,
      "contractsNamespace": null,
      "contractsOutputFilePath": null,
      "parameterDateTimeFormat": "s",
      "parameterDateFormat": "yyyy-MM-dd",
      "generateUpdateJsonSerializerSettingsMethod": true,
      "useRequestAndResponseSerializationSettings": false,
      "serializeTypeInformation": false,
      "queryNullValue": "",
      "className": "GhibliApiClient",
      "operationGenerationMode": "SingleClientFromPathSegments",
      "additionalNamespaceUsages": [],
      "additionalContractNamespaceUsages": [],
      "generateOptionalParameters": true,
      "generateJsonMethods": false,
      "enforceFlagEnums": false,
      "parameterArrayType": "System.Collections.Generic.IEnumerable",
      "parameterDictionaryType": "System.Collections.Generic.IDictionary",
      "responseArrayType": "System.Collections.Generic.ICollection",
      "responseDictionaryType": "System.Collections.Generic.IDictionary",
      "wrapResponses": false,
      "wrapResponseMethods": [],
      "generateResponseClasses": true,
      "responseClass": "SwaggerResponse",
      "namespace": "NSwagStudio_Sample",
      "requiredPropertiesMustBeDefined": true,
      "dateType": "System.DateTimeOffset",
      "jsonConverters": null,
      "anyType": "object",
      "dateTimeType": "System.DateTimeOffset",
      "timeType": "System.TimeSpan",
      "timeSpanType": "System.TimeSpan",
      "arrayType": "System.Collections.Generic.ICollection",
      "arrayInstanceType": "System.Collections.ObjectModel.Collection",
      "dictionaryType": "System.Collections.Generic.IDictionary",
      "dictionaryInstanceType": "System.Collections.Generic.Dictionary",
      "arrayBaseType": "System.Collections.ObjectModel.Collection",
      "dictionaryBaseType": "System.Collections.Generic.Dictionary",
      "classStyle": "Poco",
      "jsonLibrary": "NewtonsoftJson",
      "generateDefaultValues": true,
      "generateDataAnnotations": true,
      "excludedTypeNames": [],
      "excludedParameterNames": [],
      "handleReferences": false,
      "generateImmutableArrayProperties": false,
      "generateImmutableDictionaryProperties": false,
      "jsonSerializerSettingsTransformationMethod": null,
      "inlineNamedArrays": false,
      "inlineNamedDictionaries": false,
      "inlineNamedTuples": true,
      "inlineNamedAny": false,
      "generateDtoTypes": true,
      "generateOptionalPropertiesAsNullable": false,
      "generateNullableReferenceTypes": false,
      "templateDirectory": null,
      "typeNameGeneratorType": null,
      "propertyNameGeneratorType": null,
      "enumNameGeneratorType": null,
      "checksumCacheEnabled": false,
      "serviceHost": null,
      "serviceSchemes": null,
      "output": "GhibliApiClient.cs",
      "newLineBehavior": "CRLF"
    }
  }
}